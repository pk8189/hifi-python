"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostTransferCryptoToCryptoBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    amount: typing_extensions.Required[float]
    chain: typing_extensions.Required[typing_extensions.Literal["POLYGON_MAINNET"]]
    currency: typing_extensions.Required[typing_extensions.Literal["usdc"]]
    recipient_address: typing_extensions.NotRequired[str]
    recipient_user_id: typing_extensions.NotRequired[str]
    request_id: typing_extensions.Required[str]
    sender_user_id: typing_extensions.Required[str]


class _SerializerPostTransferCryptoToCryptoBody(pydantic.BaseModel):
    """
    Serializer for PostTransferCryptoToCryptoBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    amount: float = pydantic.Field(alias="amount")
    chain: typing_extensions.Literal["POLYGON_MAINNET"] = pydantic.Field(alias="chain")
    currency: typing_extensions.Literal["usdc"] = pydantic.Field(alias="currency")
    recipient_address: typing.Optional[str] = pydantic.Field(
        alias="recipientAddress", default=None
    )
    recipient_user_id: typing.Optional[str] = pydantic.Field(
        alias="recipientUserId", default=None
    )
    request_id: str = pydantic.Field(alias="requestId")
    sender_user_id: str = pydantic.Field(alias="senderUserId")
