"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PostUserCreateResponseRampsEuroSepaOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseRampsEuroSepaOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseRampsUsdAchOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseRampsUsdAchOnRampAchPullActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseRampsUsdAchOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseUser(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)


class PostUserCreateResponseUserKycActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseWalletActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateResponseWalletWalletAddressEthereumMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateResponseWalletWalletAddressOptimismMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateResponseWalletWalletAddressPolygonMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateResponseRampsEuroSepaOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateResponseRampsEuroSepaOffRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateResponseRampsEuroSepaOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateResponseRampsEuroSepaOnRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateResponseRampsUsdAchOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateResponseRampsUsdAchOffRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateResponseRampsUsdAchOnRampAchPull(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull_status: typing.Optional[str] = pydantic.Field(
        alias="achPullStatus", default=None
    )
    action_needed: typing.Optional[
        PostUserCreateResponseRampsUsdAchOnRampAchPullActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)


class PostUserCreateResponseUserKyc(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PostUserCreateResponseUserKycActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateResponseWalletWalletAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ethereum_mainnet: typing.Optional[
        PostUserCreateResponseWalletWalletAddressEthereumMainnet
    ] = pydantic.Field(alias="ETHEREUM_MAINNET", default=None)
    optimism_mainnet: typing.Optional[
        PostUserCreateResponseWalletWalletAddressOptimismMainnet
    ] = pydantic.Field(alias="OPTIMISM_MAINNET", default=None)
    polygon_mainnet: typing.Optional[
        PostUserCreateResponseWalletWalletAddressPolygonMainnet
    ] = pydantic.Field(alias="POLYGON_MAINNET", default=None)


class PostUserCreateResponseRampsEuroSepa(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PostUserCreateResponseRampsEuroSepaOffRamp] = (
        pydantic.Field(alias="offRamp", default=None)
    )
    on_ramp: typing.Optional[PostUserCreateResponseRampsEuroSepaOnRamp] = (
        pydantic.Field(alias="onRamp", default=None)
    )


class PostUserCreateResponseRampsUsdAchOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull: typing.Optional[PostUserCreateResponseRampsUsdAchOnRampAchPull] = (
        pydantic.Field(alias="achPull", default=None)
    )
    action_needed: typing.Optional[
        PostUserCreateResponseRampsUsdAchOnRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateResponseWallet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PostUserCreateResponseWalletActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    wallet_address: typing.Optional[PostUserCreateResponseWalletWalletAddress] = (
        pydantic.Field(alias="walletAddress", default=None)
    )
    wallet_message: typing.Optional[str] = pydantic.Field(
        alias="walletMessage", default=None
    )
    wallet_status: typing.Optional[str] = pydantic.Field(
        alias="walletStatus", default=None
    )


class PostUserCreateResponseRampsUsdAch(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PostUserCreateResponseRampsUsdAchOffRamp] = (
        pydantic.Field(alias="offRamp", default=None)
    )
    on_ramp: typing.Optional[PostUserCreateResponseRampsUsdAchOnRamp] = pydantic.Field(
        alias="onRamp", default=None
    )


class PostUserCreateResponseRamps(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    euro_sepa: typing.Optional[PostUserCreateResponseRampsEuroSepa] = pydantic.Field(
        alias="euroSepa", default=None
    )
    usd_ach: typing.Optional[PostUserCreateResponseRampsUsdAch] = pydantic.Field(
        alias="usdAch", default=None
    )


class PostUserCreateResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ramps: typing.Optional[PostUserCreateResponseRamps] = pydantic.Field(
        alias="ramps", default=None
    )
    user: typing.Optional[PostUserCreateResponseUser] = pydantic.Field(
        alias="user", default=None
    )
    user_kyc: typing.Optional[PostUserCreateResponseUserKyc] = pydantic.Field(
        alias="user_kyc", default=None
    )
    wallet: typing.Optional[PostUserCreateResponseWallet] = pydantic.Field(
        alias="wallet", default=None
    )
