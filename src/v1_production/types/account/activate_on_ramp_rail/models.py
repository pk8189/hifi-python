"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PostAccountActivateOnRampRailResponseAccountDepositInstructions(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number: typing.Optional[str] = pydantic.Field(
        alias="accountNumber", default=None
    )
    bank_address: typing.Optional[str] = pydantic.Field(
        alias="bankAddress", default=None
    )
    bank_name: typing.Optional[str] = pydantic.Field(alias="bankName", default=None)
    routing_number: typing.Optional[str] = pydantic.Field(
        alias="routingNumber", default=None
    )


class PostAccountActivateOnRampRailResponseAccount(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    deposit_instructions: typing.Optional[
        PostAccountActivateOnRampRailResponseAccountDepositInstructions
    ] = pydantic.Field(alias="depositInstructions", default=None)
    destination_chain: typing.Optional[str] = pydantic.Field(
        alias="destinationChain", default=None
    )
    destination_currency: typing.Optional[str] = pydantic.Field(
        alias="destinationCurrency", default=None
    )
    destination_wallet_address: typing.Optional[str] = pydantic.Field(
        alias="destinationWalletAddress", default=None
    )
    payment_rail: typing.Optional[str] = pydantic.Field(
        alias="paymentRail", default=None
    )
    rail_status: typing.Optional[str] = pydantic.Field(alias="railStatus", default=None)
    source_currency: typing.Optional[str] = pydantic.Field(
        alias="sourceCurrency", default=None
    )
    user_id: typing.Optional[str] = pydantic.Field(alias="userId", default=None)
    virtual_account_id: typing.Optional[str] = pydantic.Field(
        alias="virtualAccountId", default=None
    )


class PostAccountActivateOnRampRailResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[PostAccountActivateOnRampRailResponseAccount] = (
        pydantic.Field(alias="account", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
