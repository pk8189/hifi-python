"""File Generated by Sideko (sideko.dev)"""

from v1_production.core import (
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    QueryParams,
    default_request_options,
)
import typing_extensions
import typing
from v1_production.types.transfer.conversion_rate.crypto_to_fiat import models


class CryptoToFiatClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        from_currency: typing_extensions.Literal["usdc"],
        to_currency: typing_extensions.Literal["usd", "eur"],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetTransferConversionRateCryptoToFiatResponse:
        """
        Retrieve conversion rate between stablecoin and fiat currency
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["fromCurrency"] = encode_param(from_currency, False)
        _query["toCurrency"] = encode_param(to_currency, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/transfer/conversionRate/crypto-to-fiat",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetTransferConversionRateCryptoToFiatResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCryptoToFiatClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        from_currency: typing_extensions.Literal["usdc"],
        to_currency: typing_extensions.Literal["usd", "eur"],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetTransferConversionRateCryptoToFiatResponse:
        """
        Retrieve conversion rate between stablecoin and fiat currency
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["fromCurrency"] = encode_param(from_currency, False)
        _query["toCurrency"] = encode_param(to_currency, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/transfer/conversionRate/crypto-to-fiat",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetTransferConversionRateCryptoToFiatResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
