"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PutUserBusinessBodyUltimateBeneficialOwnersItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    address_line1: typing_extensions.Required[str]
    address_line2: typing_extensions.NotRequired[str]
    city: typing_extensions.Required[str]
    compliance_email: typing_extensions.Required[str]
    compliance_phone: typing_extensions.Required[str]
    country: typing_extensions.Required[str]
    date_of_birth: typing_extensions.Required[str]
    gov_id_back: typing_extensions.NotRequired[str]
    gov_id_country: typing_extensions.NotRequired[str]
    gov_id_front: typing_extensions.Required[str]
    legal_first_name: typing_extensions.Required[str]
    legal_last_name: typing_extensions.Required[str]
    postal_code: typing_extensions.Required[str]
    proof_of_residency: typing_extensions.Required[str]
    state_province_region: typing_extensions.Required[str]
    tax_identification_number: typing_extensions.Required[str]


class _SerializerPutUserBusinessBodyUltimateBeneficialOwnersItem(pydantic.BaseModel):
    """
    Serializer for PutUserBusinessBodyUltimateBeneficialOwnersItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line1: str = pydantic.Field(alias="addressLine1")
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    city: str = pydantic.Field(alias="city")
    compliance_email: str = pydantic.Field(alias="complianceEmail")
    compliance_phone: str = pydantic.Field(alias="compliancePhone")
    country: str = pydantic.Field(alias="country")
    date_of_birth: str = pydantic.Field(alias="dateOfBirth")
    gov_id_back: typing.Optional[str] = pydantic.Field(alias="govIdBack", default=None)
    gov_id_country: typing.Optional[str] = pydantic.Field(
        alias="govIdCountry", default=None
    )
    gov_id_front: str = pydantic.Field(alias="govIdFront")
    legal_first_name: str = pydantic.Field(alias="legalFirstName")
    legal_last_name: str = pydantic.Field(alias="legalLastName")
    postal_code: str = pydantic.Field(alias="postalCode")
    proof_of_residency: str = pydantic.Field(alias="proofOfResidency")
    state_province_region: str = pydantic.Field(alias="stateProvinceRegion")
    tax_identification_number: str = pydantic.Field(alias="taxIdentificationNumber")


class PutUserBusinessBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    address_line1: typing_extensions.NotRequired[str]
    address_line2: typing_extensions.NotRequired[str]
    business_description: typing_extensions.NotRequired[str]
    business_name: typing_extensions.NotRequired[str]
    business_type: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "cooperative",
            "corporation",
            "llc",
            "other",
            "partnership",
            "sole_prop",
            "trust",
        ]
    ]
    city: typing_extensions.NotRequired[str]
    compliance_email: typing_extensions.NotRequired[str]
    compliance_screening_explanation: typing_extensions.NotRequired[str]
    country: typing_extensions.NotRequired[str]
    formation_doc: typing_extensions.NotRequired[str]
    ip_address: typing_extensions.NotRequired[str]
    is_dao: typing_extensions.NotRequired[bool]
    postal_code: typing_extensions.NotRequired[str]
    proof_of_ownership: typing_extensions.NotRequired[str]
    proof_of_residency: typing_extensions.NotRequired[str]
    signed_agreement_id: typing_extensions.NotRequired[str]
    source_of_funds: typing_extensions.NotRequired[str]
    state_province_region: typing_extensions.NotRequired[str]
    tax_identification_number: typing_extensions.NotRequired[str]
    transmits_customer_funds: typing_extensions.NotRequired[bool]
    ultimate_beneficial_owners: typing_extensions.NotRequired[
        typing.List[PutUserBusinessBodyUltimateBeneficialOwnersItem]
    ]
    website: typing_extensions.NotRequired[str]


class _SerializerPutUserBusinessBody(pydantic.BaseModel):
    """
    Serializer for PutUserBusinessBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line1: typing.Optional[str] = pydantic.Field(
        alias="addressLine1", default=None
    )
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    business_description: typing.Optional[str] = pydantic.Field(
        alias="businessDescription", default=None
    )
    business_name: typing.Optional[str] = pydantic.Field(
        alias="businessName", default=None
    )
    business_type: typing.Optional[
        typing_extensions.Literal[
            "cooperative",
            "corporation",
            "llc",
            "other",
            "partnership",
            "sole_prop",
            "trust",
        ]
    ] = pydantic.Field(alias="businessType", default=None)
    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    compliance_email: typing.Optional[str] = pydantic.Field(
        alias="complianceEmail", default=None
    )
    compliance_screening_explanation: typing.Optional[str] = pydantic.Field(
        alias="complianceScreeningExplanation", default=None
    )
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    formation_doc: typing.Optional[str] = pydantic.Field(
        alias="formationDoc", default=None
    )
    ip_address: typing.Optional[str] = pydantic.Field(alias="ipAddress", default=None)
    is_dao: typing.Optional[bool] = pydantic.Field(alias="isDao", default=None)
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    proof_of_ownership: typing.Optional[str] = pydantic.Field(
        alias="proofOfOwnership", default=None
    )
    proof_of_residency: typing.Optional[str] = pydantic.Field(
        alias="proofOfResidency", default=None
    )
    signed_agreement_id: typing.Optional[str] = pydantic.Field(
        alias="signedAgreementId", default=None
    )
    source_of_funds: typing.Optional[str] = pydantic.Field(
        alias="sourceOfFunds", default=None
    )
    state_province_region: typing.Optional[str] = pydantic.Field(
        alias="stateProvinceRegion", default=None
    )
    tax_identification_number: typing.Optional[str] = pydantic.Field(
        alias="taxIdentificationNumber", default=None
    )
    transmits_customer_funds: typing.Optional[bool] = pydantic.Field(
        alias="transmitsCustomerFunds", default=None
    )
    ultimate_beneficial_owners: typing.Optional[
        typing.List[_SerializerPutUserBusinessBodyUltimateBeneficialOwnersItem]
    ] = pydantic.Field(alias="ultimateBeneficialOwners", default=None)
    website: typing.Optional[str] = pydantic.Field(alias="website", default=None)
