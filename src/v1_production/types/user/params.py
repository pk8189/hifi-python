"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PutUserBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    address_line1: typing_extensions.NotRequired[str]
    address_line2: typing_extensions.NotRequired[str]
    city: typing_extensions.NotRequired[str]
    compliance_email: typing_extensions.NotRequired[str]
    compliance_phone: typing_extensions.NotRequired[str]
    country: typing_extensions.NotRequired[str]
    date_of_birth: typing_extensions.NotRequired[str]
    gov_id_back: typing_extensions.NotRequired[str]
    gov_id_country: typing_extensions.NotRequired[str]
    gov_id_front: typing_extensions.NotRequired[str]
    ip_address: typing_extensions.NotRequired[str]
    legal_first_name: typing_extensions.NotRequired[str]
    legal_last_name: typing_extensions.NotRequired[str]
    postal_code: typing_extensions.NotRequired[str]
    proof_of_residency: typing_extensions.NotRequired[str]
    signed_agreement_id: typing_extensions.NotRequired[str]
    state_province_region: typing_extensions.NotRequired[str]
    tax_identification_number: typing_extensions.NotRequired[str]


class _SerializerPutUserBody(pydantic.BaseModel):
    """
    Serializer for PutUserBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line1: typing.Optional[str] = pydantic.Field(
        alias="addressLine1", default=None
    )
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    compliance_email: typing.Optional[str] = pydantic.Field(
        alias="complianceEmail", default=None
    )
    compliance_phone: typing.Optional[str] = pydantic.Field(
        alias="compliancePhone", default=None
    )
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    date_of_birth: typing.Optional[str] = pydantic.Field(
        alias="dateOfBirth", default=None
    )
    gov_id_back: typing.Optional[str] = pydantic.Field(alias="govIdBack", default=None)
    gov_id_country: typing.Optional[str] = pydantic.Field(
        alias="govIdCountry", default=None
    )
    gov_id_front: typing.Optional[str] = pydantic.Field(
        alias="govIdFront", default=None
    )
    ip_address: typing.Optional[str] = pydantic.Field(alias="ipAddress", default=None)
    legal_first_name: typing.Optional[str] = pydantic.Field(
        alias="legalFirstName", default=None
    )
    legal_last_name: typing.Optional[str] = pydantic.Field(
        alias="legalLastName", default=None
    )
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    proof_of_residency: typing.Optional[str] = pydantic.Field(
        alias="proofOfResidency", default=None
    )
    signed_agreement_id: typing.Optional[str] = pydantic.Field(
        alias="signedAgreementId", default=None
    )
    state_province_region: typing.Optional[str] = pydantic.Field(
        alias="stateProvinceRegion", default=None
    )
    tax_identification_number: typing.Optional[str] = pydantic.Field(
        alias="taxIdentificationNumber", default=None
    )
