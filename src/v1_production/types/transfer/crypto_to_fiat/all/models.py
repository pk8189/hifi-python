"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsDestinationAccount(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number: typing.Optional[str] = pydantic.Field(
        alias="account_number", default=None
    )
    account_owner_name: typing.Optional[str] = pydantic.Field(
        alias="account_owner_name", default=None
    )
    account_type: typing.Optional[str] = pydantic.Field(
        alias="account_type", default=None
    )
    bank_country: typing.Optional[typing.Any] = pydantic.Field(
        alias="bank_country", default=None
    )
    bank_name: typing.Optional[str] = pydantic.Field(alias="bank_name", default=None)
    beneficiary_first_name: typing.Optional[typing.Any] = pydantic.Field(
        alias="beneficiary_first_name", default=None
    )
    beneficiary_last_name: typing.Optional[typing.Any] = pydantic.Field(
        alias="beneficiary_last_name", default=None
    )
    business_identifier_code: typing.Optional[typing.Any] = pydantic.Field(
        alias="business_identifier_code", default=None
    )
    iban: typing.Optional[typing.Any] = pydantic.Field(alias="iban", default=None)
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    routing_number: typing.Optional[str] = pydantic.Field(
        alias="routing_number", default=None
    )


class GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsDestinationUser(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    business_name: typing.Optional[typing.Any] = pydantic.Field(
        alias="business_name", default=None
    )
    compliance_email: typing.Optional[str] = pydantic.Field(
        alias="compliance_email", default=None
    )
    legal_first_name: typing.Optional[str] = pydantic.Field(
        alias="legal_first_name", default=None
    )
    legal_last_name: typing.Optional[str] = pydantic.Field(
        alias="legal_last_name", default=None
    )


class GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsSourceUser(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    business_name: typing.Optional[typing.Any] = pydantic.Field(
        alias="business_name", default=None
    )
    compliance_email: typing.Optional[str] = pydantic.Field(
        alias="compliance_email", default=None
    )
    legal_first_name: typing.Optional[str] = pydantic.Field(
        alias="legal_first_name", default=None
    )
    legal_last_name: typing.Optional[str] = pydantic.Field(
        alias="legal_last_name", default=None
    )


class GetTransferCryptoToFiatAllResponseRecordsItemTransferDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: typing.Optional[str] = pydantic.Field(alias="amount", default=None)
    chain: typing.Optional[str] = pydantic.Field(alias="chain", default=None)
    contract_address: typing.Optional[str] = pydantic.Field(
        alias="contractAddress", default=None
    )
    created_at: typing.Optional[str] = pydantic.Field(alias="createdAt", default=None)
    destination_account: typing.Optional[
        GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsDestinationAccount
    ] = pydantic.Field(alias="destinationAccount", default=None)
    destination_account_id: typing.Optional[str] = pydantic.Field(
        alias="destinationAccountId", default=None
    )
    destination_currency: typing.Optional[str] = pydantic.Field(
        alias="destinationCurrency", default=None
    )
    destination_user: typing.Optional[
        GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsDestinationUser
    ] = pydantic.Field(alias="destinationUser", default=None)
    destination_user_id: typing.Optional[str] = pydantic.Field(
        alias="destinationUserId", default=None
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    request_id: typing.Optional[str] = pydantic.Field(alias="requestId", default=None)
    source_currency: typing.Optional[str] = pydantic.Field(
        alias="sourceCurrency", default=None
    )
    source_user: typing.Optional[
        GetTransferCryptoToFiatAllResponseRecordsItemTransferDetailsSourceUser
    ] = pydantic.Field(alias="sourceUser", default=None)
    source_user_id: typing.Optional[str] = pydantic.Field(
        alias="sourceUserId", default=None
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
    transaction_hash: typing.Optional[str] = pydantic.Field(
        alias="transactionHash", default=None
    )
    updated_at: typing.Optional[str] = pydantic.Field(alias="updatedAt", default=None)


class GetTransferCryptoToFiatAllResponseRecordsItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    transfer_details: typing.Optional[
        GetTransferCryptoToFiatAllResponseRecordsItemTransferDetails
    ] = pydantic.Field(alias="transferDetails", default=None)
    transfer_type: typing.Optional[str] = pydantic.Field(
        alias="transferType", default=None
    )


class GetTransferCryptoToFiatAllResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    count: typing.Optional[int] = pydantic.Field(alias="count", default=None)
    records: typing.Optional[
        typing.List[GetTransferCryptoToFiatAllResponseRecordsItem]
    ] = pydantic.Field(alias="records", default=None)
