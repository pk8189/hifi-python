"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GetAccountOnRampRailVirtualAccountResponseDepositInstructions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number: typing.Optional[str] = pydantic.Field(
        alias="accountNumber", default=None
    )
    bank_address: typing.Optional[str] = pydantic.Field(
        alias="bankAddress", default=None
    )
    bank_name: typing.Optional[str] = pydantic.Field(alias="bankName", default=None)
    routing_number: typing.Optional[str] = pydantic.Field(
        alias="routingNumber", default=None
    )


class GetAccountOnRampRailVirtualAccountResponseMicroDepositsDataItemSourceBankAccountDetails(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bank_name: typing.Optional[str] = pydantic.Field(alias="bankName", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    routing_number: typing.Optional[str] = pydantic.Field(
        alias="routingNumber", default=None
    )
    trace_number: typing.Optional[str] = pydantic.Field(
        alias="traceNumber", default=None
    )


class GetAccountOnRampRailVirtualAccountResponseMicroDepositsDataItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    amount: typing.Optional[str] = pydantic.Field(alias="amount", default=None)
    created_at: typing.Optional[str] = pydantic.Field(alias="createdAt", default=None)
    currency: typing.Optional[str] = pydantic.Field(alias="currency", default=None)
    event_id: typing.Optional[str] = pydantic.Field(alias="eventId", default=None)
    source_bank_account_details: typing.Optional[
        GetAccountOnRampRailVirtualAccountResponseMicroDepositsDataItemSourceBankAccountDetails
    ] = pydantic.Field(alias="sourceBankAccountDetails", default=None)


class GetAccountOnRampRailVirtualAccountResponseMicroDeposits(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    count: typing.Optional[int] = pydantic.Field(alias="count", default=None)
    data: typing.Optional[
        typing.List[GetAccountOnRampRailVirtualAccountResponseMicroDepositsDataItem]
    ] = pydantic.Field(alias="data", default=None)


class GetAccountOnRampRailVirtualAccountResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    deposit_instructions: typing.Optional[
        GetAccountOnRampRailVirtualAccountResponseDepositInstructions
    ] = pydantic.Field(alias="depositInstructions", default=None)
    destination_chain: typing.Optional[str] = pydantic.Field(
        alias="destinationChain", default=None
    )
    destination_currency: typing.Optional[str] = pydantic.Field(
        alias="destinationCurrency", default=None
    )
    destination_wallet_address: typing.Optional[str] = pydantic.Field(
        alias="destinationWalletAddress", default=None
    )
    micro_deposits: typing.Optional[
        GetAccountOnRampRailVirtualAccountResponseMicroDeposits
    ] = pydantic.Field(alias="microDeposits", default=None)
    payment_rail: typing.Optional[str] = pydantic.Field(
        alias="paymentRail", default=None
    )
    rail_status: typing.Optional[str] = pydantic.Field(alias="railStatus", default=None)
    source_currency: typing.Optional[str] = pydantic.Field(
        alias="sourceCurrency", default=None
    )
    user_id: typing.Optional[str] = pydantic.Field(alias="userId", default=None)
    virtual_account_id: typing.Optional[str] = pydantic.Field(
        alias="virtualAccountId", default=None
    )
