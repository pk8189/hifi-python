"""File Generated by Sideko (sideko.dev)"""

from v1_production.core import (
    AsyncBaseClient,
    to_encodable,
    RequestOptions,
    default_request_options,
    QueryParams,
    encode_param,
    SyncBaseClient,
)
from v1_production.resources.transfer.fiat_to_crypto.all import (
    AsyncAllClient,
    AllClient,
)
import typing
from v1_production.types.transfer.fiat_to_crypto import params, models


class FiatToCryptoClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.all = AllClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostTransferFiatToCryptoBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostTransferFiatToCryptoResponse:
        """
        Move fiat funds in a bank account into stablecoin on the blockchain
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostTransferFiatToCryptoBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/transfer/fiat-to-crypto",
            auth_names=["sec0"],
            json=_json,
            cast_to=models.PostTransferFiatToCryptoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetTransferFiatToCryptoResponse:
        """
        Get the transfer history of a specific fiat to stablecoin transfer
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["id"] = encode_param(id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/transfer/fiat-to-crypto",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetTransferFiatToCryptoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncFiatToCryptoClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.all = AsyncAllClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostTransferFiatToCryptoBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostTransferFiatToCryptoResponse:
        """
        Move fiat funds in a bank account into stablecoin on the blockchain
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostTransferFiatToCryptoBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/transfer/fiat-to-crypto",
            auth_names=["sec0"],
            json=_json,
            cast_to=models.PostTransferFiatToCryptoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetTransferFiatToCryptoResponse:
        """
        Get the transfer history of a specific fiat to stablecoin transfer
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["id"] = encode_param(id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/transfer/fiat-to-crypto",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetTransferFiatToCryptoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
