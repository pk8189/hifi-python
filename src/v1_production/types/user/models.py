"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GetUserResponseRampsEuroSepaOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseRampsEuroSepaOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseRampsUsdAchOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseRampsUsdAchOnRampAchPullActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseRampsUsdAchOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseUser(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)


class GetUserResponseUserKycActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseWalletActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class GetUserResponseWalletWalletAddressEthereumMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class GetUserResponseWalletWalletAddressOptimismMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class GetUserResponseWalletWalletAddressPolygonMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PutUserResponseRampsEuroSepaOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseRampsEuroSepaOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseRampsUsdAchOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseRampsUsdAchOnRampAchPullActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseRampsUsdAchOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseUser(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)


class PutUserResponseUserKycActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseWalletActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PutUserResponseWalletWalletAddressEthereumMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PutUserResponseWalletWalletAddressOptimismMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PutUserResponseWalletWalletAddressPolygonMainnet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class GetUserResponseRampsEuroSepaOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[GetUserResponseRampsEuroSepaOffRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class GetUserResponseRampsEuroSepaOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[GetUserResponseRampsEuroSepaOnRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class GetUserResponseRampsUsdAchOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[GetUserResponseRampsUsdAchOffRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class GetUserResponseRampsUsdAchOnRampAchPull(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull_status: typing.Optional[str] = pydantic.Field(
        alias="achPullStatus", default=None
    )
    action_needed: typing.Optional[
        GetUserResponseRampsUsdAchOnRampAchPullActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)


class GetUserResponseUserKyc(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[GetUserResponseUserKycActionNeeded] = pydantic.Field(
        alias="actionNeeded", default=None
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class GetUserResponseWalletWalletAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ethereum_mainnet: typing.Optional[
        GetUserResponseWalletWalletAddressEthereumMainnet
    ] = pydantic.Field(alias="ETHEREUM_MAINNET", default=None)
    optimism_mainnet: typing.Optional[
        GetUserResponseWalletWalletAddressOptimismMainnet
    ] = pydantic.Field(alias="OPTIMISM_MAINNET", default=None)
    polygon_mainnet: typing.Optional[
        GetUserResponseWalletWalletAddressPolygonMainnet
    ] = pydantic.Field(alias="POLYGON_MAINNET", default=None)


class PutUserResponseRampsEuroSepaOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PutUserResponseRampsEuroSepaOffRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PutUserResponseRampsEuroSepaOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PutUserResponseRampsEuroSepaOnRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PutUserResponseRampsUsdAchOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PutUserResponseRampsUsdAchOffRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PutUserResponseRampsUsdAchOnRampAchPull(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull_status: typing.Optional[str] = pydantic.Field(
        alias="achPullStatus", default=None
    )
    action_needed: typing.Optional[
        PutUserResponseRampsUsdAchOnRampAchPullActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)


class PutUserResponseUserKyc(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PutUserResponseUserKycActionNeeded] = pydantic.Field(
        alias="actionNeeded", default=None
    )
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PutUserResponseWalletWalletAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ethereum_mainnet: typing.Optional[
        PutUserResponseWalletWalletAddressEthereumMainnet
    ] = pydantic.Field(alias="ETHEREUM_MAINNET", default=None)
    optimism_mainnet: typing.Optional[
        PutUserResponseWalletWalletAddressOptimismMainnet
    ] = pydantic.Field(alias="OPTIMISM_MAINNET", default=None)
    polygon_mainnet: typing.Optional[
        PutUserResponseWalletWalletAddressPolygonMainnet
    ] = pydantic.Field(alias="POLYGON_MAINNET", default=None)


class GetUserResponseRampsEuroSepa(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[GetUserResponseRampsEuroSepaOffRamp] = pydantic.Field(
        alias="offRamp", default=None
    )
    on_ramp: typing.Optional[GetUserResponseRampsEuroSepaOnRamp] = pydantic.Field(
        alias="onRamp", default=None
    )


class GetUserResponseRampsUsdAchOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull: typing.Optional[GetUserResponseRampsUsdAchOnRampAchPull] = pydantic.Field(
        alias="achPull", default=None
    )
    action_needed: typing.Optional[GetUserResponseRampsUsdAchOnRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class GetUserResponseWallet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[GetUserResponseWalletActionNeeded] = pydantic.Field(
        alias="actionNeeded", default=None
    )
    wallet_address: typing.Optional[GetUserResponseWalletWalletAddress] = (
        pydantic.Field(alias="walletAddress", default=None)
    )
    wallet_message: typing.Optional[str] = pydantic.Field(
        alias="walletMessage", default=None
    )
    wallet_status: typing.Optional[str] = pydantic.Field(
        alias="walletStatus", default=None
    )


class PutUserResponseRampsEuroSepa(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PutUserResponseRampsEuroSepaOffRamp] = pydantic.Field(
        alias="offRamp", default=None
    )
    on_ramp: typing.Optional[PutUserResponseRampsEuroSepaOnRamp] = pydantic.Field(
        alias="onRamp", default=None
    )


class PutUserResponseRampsUsdAchOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull: typing.Optional[PutUserResponseRampsUsdAchOnRampAchPull] = pydantic.Field(
        alias="achPull", default=None
    )
    action_needed: typing.Optional[PutUserResponseRampsUsdAchOnRampActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PutUserResponseWallet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PutUserResponseWalletActionNeeded] = pydantic.Field(
        alias="actionNeeded", default=None
    )
    wallet_address: typing.Optional[PutUserResponseWalletWalletAddress] = (
        pydantic.Field(alias="walletAddress", default=None)
    )
    wallet_message: typing.Optional[str] = pydantic.Field(
        alias="walletMessage", default=None
    )
    wallet_status: typing.Optional[str] = pydantic.Field(
        alias="walletStatus", default=None
    )


class GetUserResponseRampsUsdAch(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[GetUserResponseRampsUsdAchOffRamp] = pydantic.Field(
        alias="offRamp", default=None
    )
    on_ramp: typing.Optional[GetUserResponseRampsUsdAchOnRamp] = pydantic.Field(
        alias="onRamp", default=None
    )


class PutUserResponseRampsUsdAch(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PutUserResponseRampsUsdAchOffRamp] = pydantic.Field(
        alias="offRamp", default=None
    )
    on_ramp: typing.Optional[PutUserResponseRampsUsdAchOnRamp] = pydantic.Field(
        alias="onRamp", default=None
    )


class GetUserResponseRamps(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    euro_sepa: typing.Optional[GetUserResponseRampsEuroSepa] = pydantic.Field(
        alias="euroSepa", default=None
    )
    usd_ach: typing.Optional[GetUserResponseRampsUsdAch] = pydantic.Field(
        alias="usdAch", default=None
    )


class PutUserResponseRamps(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    euro_sepa: typing.Optional[PutUserResponseRampsEuroSepa] = pydantic.Field(
        alias="euroSepa", default=None
    )
    usd_ach: typing.Optional[PutUserResponseRampsUsdAch] = pydantic.Field(
        alias="usdAch", default=None
    )


class GetUserResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ramps: typing.Optional[GetUserResponseRamps] = pydantic.Field(
        alias="ramps", default=None
    )
    user: typing.Optional[GetUserResponseUser] = pydantic.Field(
        alias="user", default=None
    )
    user_kyc: typing.Optional[GetUserResponseUserKyc] = pydantic.Field(
        alias="user_kyc", default=None
    )
    wallet: typing.Optional[GetUserResponseWallet] = pydantic.Field(
        alias="wallet", default=None
    )


class PutUserResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ramps: typing.Optional[PutUserResponseRamps] = pydantic.Field(
        alias="ramps", default=None
    )
    user: typing.Optional[PutUserResponseUser] = pydantic.Field(
        alias="user", default=None
    )
    user_kyc: typing.Optional[PutUserResponseUserKyc] = pydantic.Field(
        alias="user_kyc", default=None
    )
    wallet: typing.Optional[PutUserResponseWallet] = pydantic.Field(
        alias="wallet", default=None
    )
