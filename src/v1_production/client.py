"""File Generated by Sideko (sideko.dev)"""

import httpx
import typing
from v1_production.environment import Environment
from v1_production.core import SyncBaseClient, AsyncBaseClient, AuthKeyHeader
from v1_production.resources.account import AsyncAccountClient, AccountClient
from v1_production.resources.ping import AsyncPingClient, PingClient
from v1_production.resources.transfer import AsyncTransferClient, TransferClient
from v1_production.resources.user import UserClient, AsyncUserClient
from v1_production.resources.tos_link import TosLinkClient, AsyncTosLinkClient
from v1_production.resources.user_business import (
    AsyncUserBusinessClient,
    UserBusinessClient,
)


class Client:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None,
        api_key: typing.Optional[str] = None,
    ):
        self._base_client = SyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.Client(timeout=timeout) if httpx_client is None else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "sec0", AuthKeyHeader(header_name="authorization", val=api_key)
        )

        # register sync resources (keep comment for code generation)
        self.account = AccountClient(base_client=self._base_client)
        self.ping = PingClient(base_client=self._base_client)
        self.transfer = TransferClient(base_client=self._base_client)
        self.user = UserClient(base_client=self._base_client)
        self.tos_link = TosLinkClient(base_client=self._base_client)
        self.user_business = UserBusinessClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)


class AsyncClient:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
        api_key: typing.Optional[str] = None,
    ):
        self._base_client = AsyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.AsyncClient(timeout=timeout)
                if httpx_client is None
                else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "sec0", AuthKeyHeader(header_name="authorization", val=api_key)
        )

        # register async resources (keep comment for code generation)
        self.account = AsyncAccountClient(base_client=self._base_client)
        self.ping = AsyncPingClient(base_client=self._base_client)
        self.transfer = AsyncTransferClient(base_client=self._base_client)
        self.user = AsyncUserClient(base_client=self._base_client)
        self.tos_link = AsyncTosLinkClient(base_client=self._base_client)
        self.user_business = AsyncUserBusinessClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: Environment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Must include a base_url or environment arguments")
