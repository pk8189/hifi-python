"""File Generated by Sideko (sideko.dev)"""

from v1_production.core import (
    default_request_options,
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    QueryParams,
)
import typing
import typing_extensions
from v1_production.types.account.all import models


class AllClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        currency: typing.Optional[
            typing_extensions.Literal["usd", "eur", "brl"]
        ] = None,
        limit: typing.Optional[str] = None,
        payment_rail: typing.Optional[
            typing_extensions.Literal["ach", "wire", "sepa", "pix"]
        ] = None,
        rail_type: typing.Optional[
            typing_extensions.Literal["onramp", "offramp"]
        ] = None,
        user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountAllResponse:
        """
        Returns all bank accounts that was added with HIFI's /account endpoints under specified rail.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if created_after is not None:
            _query["createdAfter"] = encode_param(created_after, False)
        if created_before is not None:
            _query["createdBefore"] = encode_param(created_before, False)
        if currency is not None:
            _query["currency"] = encode_param(currency, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if payment_rail is not None:
            _query["paymentRail"] = encode_param(payment_rail, False)
        if rail_type is not None:
            _query["railType"] = encode_param(rail_type, False)
        if user_id is not None:
            _query["userId"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/account/all",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetAccountAllResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAllClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        currency: typing.Optional[
            typing_extensions.Literal["usd", "eur", "brl"]
        ] = None,
        limit: typing.Optional[str] = None,
        payment_rail: typing.Optional[
            typing_extensions.Literal["ach", "wire", "sepa", "pix"]
        ] = None,
        rail_type: typing.Optional[
            typing_extensions.Literal["onramp", "offramp"]
        ] = None,
        user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountAllResponse:
        """
        Returns all bank accounts that was added with HIFI's /account endpoints under specified rail.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if created_after is not None:
            _query["createdAfter"] = encode_param(created_after, False)
        if created_before is not None:
            _query["createdBefore"] = encode_param(created_before, False)
        if currency is not None:
            _query["currency"] = encode_param(currency, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if payment_rail is not None:
            _query["paymentRail"] = encode_param(payment_rail, False)
        if rail_type is not None:
            _query["railType"] = encode_param(rail_type, False)
        if user_id is not None:
            _query["userId"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/account/all",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetAccountAllResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
