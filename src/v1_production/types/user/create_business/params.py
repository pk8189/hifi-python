"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostUserCreateBusinessBodyUltimateBeneficialOwnersItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    address_line1: typing_extensions.Required[str]
    address_line2: typing_extensions.NotRequired[str]
    city: typing_extensions.Required[str]
    compliance_email: typing_extensions.Required[str]
    compliance_phone: typing_extensions.Required[str]
    country: typing_extensions.Required[str]
    date_of_birth: typing_extensions.Required[str]
    gov_id_back: typing_extensions.NotRequired[str]
    gov_id_country: typing_extensions.NotRequired[str]
    gov_id_front: typing_extensions.Required[str]
    legal_first_name: typing_extensions.Required[str]
    legal_last_name: typing_extensions.Required[str]
    postal_code: typing_extensions.Required[str]
    proof_of_residency: typing_extensions.Required[str]
    state_province_region: typing_extensions.Required[str]
    tax_identification_number: typing_extensions.Required[str]


class _SerializerPostUserCreateBusinessBodyUltimateBeneficialOwnersItem(
    pydantic.BaseModel
):
    """
    Serializer for PostUserCreateBusinessBodyUltimateBeneficialOwnersItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line1: str = pydantic.Field(alias="addressLine1")
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    city: str = pydantic.Field(alias="city")
    compliance_email: str = pydantic.Field(alias="complianceEmail")
    compliance_phone: str = pydantic.Field(alias="compliancePhone")
    country: str = pydantic.Field(alias="country")
    date_of_birth: str = pydantic.Field(alias="dateOfBirth")
    gov_id_back: typing.Optional[str] = pydantic.Field(alias="govIdBack", default=None)
    gov_id_country: typing.Optional[str] = pydantic.Field(
        alias="govIdCountry", default=None
    )
    gov_id_front: str = pydantic.Field(alias="govIdFront")
    legal_first_name: str = pydantic.Field(alias="legalFirstName")
    legal_last_name: str = pydantic.Field(alias="legalLastName")
    postal_code: str = pydantic.Field(alias="postalCode")
    proof_of_residency: str = pydantic.Field(alias="proofOfResidency")
    state_province_region: str = pydantic.Field(alias="stateProvinceRegion")
    tax_identification_number: str = pydantic.Field(alias="taxIdentificationNumber")


class PostUserCreateBusinessBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    address_line1: typing_extensions.Required[str]
    address_line2: typing_extensions.NotRequired[str]
    business_description: typing_extensions.Required[str]
    business_name: typing_extensions.Required[str]
    business_type: typing_extensions.Required[
        typing_extensions.Literal[
            "cooperative",
            "corporation",
            "llc",
            "other",
            "partnership",
            "sole_prop",
            "trust",
        ]
    ]
    city: typing_extensions.Required[str]
    compliance_email: typing_extensions.Required[str]
    compliance_screening_explanation: typing_extensions.NotRequired[str]
    country: typing_extensions.Required[str]
    formation_doc: typing_extensions.Required[str]
    ip_address: typing_extensions.Required[str]
    is_dao: typing_extensions.Required[bool]
    postal_code: typing_extensions.Required[str]
    proof_of_ownership: typing_extensions.Required[str]
    proof_of_residency: typing_extensions.NotRequired[str]
    signed_agreement_id: typing_extensions.Required[str]
    source_of_funds: typing_extensions.Required[str]
    state_province_region: typing_extensions.Required[str]
    tax_identification_number: typing_extensions.Required[str]
    transmits_customer_funds: typing_extensions.Required[bool]
    ultimate_beneficial_owners: typing_extensions.Required[
        typing.List[PostUserCreateBusinessBodyUltimateBeneficialOwnersItem]
    ]
    user_type: typing_extensions.Required[typing_extensions.Literal["business"]]
    website: typing_extensions.Required[str]


class _SerializerPostUserCreateBusinessBody(pydantic.BaseModel):
    """
    Serializer for PostUserCreateBusinessBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line1: str = pydantic.Field(alias="addressLine1")
    address_line2: typing.Optional[str] = pydantic.Field(
        alias="addressLine2", default=None
    )
    business_description: str = pydantic.Field(alias="businessDescription")
    business_name: str = pydantic.Field(alias="businessName")
    business_type: typing_extensions.Literal[
        "cooperative",
        "corporation",
        "llc",
        "other",
        "partnership",
        "sole_prop",
        "trust",
    ] = pydantic.Field(alias="businessType")
    city: str = pydantic.Field(alias="city")
    compliance_email: str = pydantic.Field(alias="complianceEmail")
    compliance_screening_explanation: typing.Optional[str] = pydantic.Field(
        alias="complianceScreeningExplanation", default=None
    )
    country: str = pydantic.Field(alias="country")
    formation_doc: str = pydantic.Field(alias="formationDoc")
    ip_address: str = pydantic.Field(alias="ipAddress")
    is_dao: bool = pydantic.Field(alias="isDao")
    postal_code: str = pydantic.Field(alias="postalCode")
    proof_of_ownership: str = pydantic.Field(alias="proofOfOwnership")
    proof_of_residency: typing.Optional[str] = pydantic.Field(
        alias="proofOfResidency", default=None
    )
    signed_agreement_id: str = pydantic.Field(alias="signedAgreementId")
    source_of_funds: str = pydantic.Field(alias="sourceOfFunds")
    state_province_region: str = pydantic.Field(alias="stateProvinceRegion")
    tax_identification_number: str = pydantic.Field(alias="taxIdentificationNumber")
    transmits_customer_funds: bool = pydantic.Field(alias="transmitsCustomerFunds")
    ultimate_beneficial_owners: typing.List[
        _SerializerPostUserCreateBusinessBodyUltimateBeneficialOwnersItem
    ] = pydantic.Field(alias="ultimateBeneficialOwners")
    user_type: typing_extensions.Literal["business"] = pydantic.Field(alias="userType")
    website: str = pydantic.Field(alias="website")
