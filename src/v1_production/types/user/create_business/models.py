"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PostUserCreateBusinessResponseRampsEuroSepaOffRampActionNeeded(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseRampsEuroSepaOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseRampsUsdAchOffRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseRampsUsdAchOnRampAchPullActionNeeded(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseRampsUsdAchOnRampActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseUser(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)


class PostUserCreateBusinessResponseUserKycActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseWalletActionNeeded(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.Any] = pydantic.Field(alias="actions", default=None)
    fields_to_resubmit: typing.Optional[typing.Any] = pydantic.Field(
        alias="fieldsToResubmit", default=None
    )


class PostUserCreateBusinessResponseWalletWalletAddressEthereumMainnet(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateBusinessResponseWalletWalletAddressOptimismMainnet(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateBusinessResponseWalletWalletAddressPolygonMainnet(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = pydantic.Field(alias="address", default=None)


class PostUserCreateBusinessResponseRampsEuroSepaOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateBusinessResponseRampsEuroSepaOffRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateBusinessResponseRampsEuroSepaOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateBusinessResponseRampsEuroSepaOnRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateBusinessResponseRampsUsdAchOffRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateBusinessResponseRampsUsdAchOffRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateBusinessResponseRampsUsdAchOnRampAchPull(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull_status: typing.Optional[str] = pydantic.Field(
        alias="achPullStatus", default=None
    )
    action_needed: typing.Optional[
        PostUserCreateBusinessResponseRampsUsdAchOnRampAchPullActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)


class PostUserCreateBusinessResponseUserKyc(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[
        PostUserCreateBusinessResponseUserKycActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateBusinessResponseWalletWalletAddress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ethereum_mainnet: typing.Optional[
        PostUserCreateBusinessResponseWalletWalletAddressEthereumMainnet
    ] = pydantic.Field(alias="ETHEREUM_MAINNET", default=None)
    optimism_mainnet: typing.Optional[
        PostUserCreateBusinessResponseWalletWalletAddressOptimismMainnet
    ] = pydantic.Field(alias="OPTIMISM_MAINNET", default=None)
    polygon_mainnet: typing.Optional[
        PostUserCreateBusinessResponseWalletWalletAddressPolygonMainnet
    ] = pydantic.Field(alias="POLYGON_MAINNET", default=None)


class PostUserCreateBusinessResponseRampsEuroSepa(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PostUserCreateBusinessResponseRampsEuroSepaOffRamp] = (
        pydantic.Field(alias="offRamp", default=None)
    )
    on_ramp: typing.Optional[PostUserCreateBusinessResponseRampsEuroSepaOnRamp] = (
        pydantic.Field(alias="onRamp", default=None)
    )


class PostUserCreateBusinessResponseRampsUsdAchOnRamp(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ach_pull: typing.Optional[
        PostUserCreateBusinessResponseRampsUsdAchOnRampAchPull
    ] = pydantic.Field(alias="achPull", default=None)
    action_needed: typing.Optional[
        PostUserCreateBusinessResponseRampsUsdAchOnRampActionNeeded
    ] = pydantic.Field(alias="actionNeeded", default=None)
    message: typing.Optional[str] = pydantic.Field(alias="message", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)


class PostUserCreateBusinessResponseWallet(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_needed: typing.Optional[PostUserCreateBusinessResponseWalletActionNeeded] = (
        pydantic.Field(alias="actionNeeded", default=None)
    )
    wallet_address: typing.Optional[
        PostUserCreateBusinessResponseWalletWalletAddress
    ] = pydantic.Field(alias="walletAddress", default=None)
    wallet_message: typing.Optional[str] = pydantic.Field(
        alias="walletMessage", default=None
    )
    wallet_status: typing.Optional[str] = pydantic.Field(
        alias="walletStatus", default=None
    )


class PostUserCreateBusinessResponseRampsUsdAch(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    off_ramp: typing.Optional[PostUserCreateBusinessResponseRampsUsdAchOffRamp] = (
        pydantic.Field(alias="offRamp", default=None)
    )
    on_ramp: typing.Optional[PostUserCreateBusinessResponseRampsUsdAchOnRamp] = (
        pydantic.Field(alias="onRamp", default=None)
    )


class PostUserCreateBusinessResponseRamps(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    euro_sepa: typing.Optional[PostUserCreateBusinessResponseRampsEuroSepa] = (
        pydantic.Field(alias="euroSepa", default=None)
    )
    usd_ach: typing.Optional[PostUserCreateBusinessResponseRampsUsdAch] = (
        pydantic.Field(alias="usdAch", default=None)
    )


class PostUserCreateBusinessResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ramps: typing.Optional[PostUserCreateBusinessResponseRamps] = pydantic.Field(
        alias="ramps", default=None
    )
    user: typing.Optional[PostUserCreateBusinessResponseUser] = pydantic.Field(
        alias="user", default=None
    )
    user_kyc: typing.Optional[PostUserCreateBusinessResponseUserKyc] = pydantic.Field(
        alias="user_kyc", default=None
    )
    wallet: typing.Optional[PostUserCreateBusinessResponseWallet] = pydantic.Field(
        alias="wallet", default=None
    )
