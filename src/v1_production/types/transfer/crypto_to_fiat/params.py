"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostTransferCryptoToFiatBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    amount: typing_extensions.Required[float]
    chain: typing_extensions.Required[
        typing_extensions.Literal["POLYGON_MAINNET", "TRON"]
    ]
    description: typing_extensions.NotRequired[str]
    destination_account_id: typing_extensions.Required[str]
    destination_currency: typing_extensions.Required[typing_extensions.Literal["usd"]]
    destination_user_id: typing_extensions.Required[str]
    payment_rail: typing_extensions.Required[
        typing_extensions.Literal["ach", "sepa", "wire"]
    ]
    purpose_of_payment: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "payment_for_goods",
            "payment_for_business_services",
            "payment_for_salary_or_benefits",
            "capital_investment_or_item",
            "other",
        ]
    ]
    request_id: typing_extensions.Required[str]
    source_currency: typing_extensions.Required[
        typing_extensions.Literal["usdc", "usdt"]
    ]
    source_user_id: typing_extensions.Required[str]


class _SerializerPostTransferCryptoToFiatBody(pydantic.BaseModel):
    """
    Serializer for PostTransferCryptoToFiatBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    amount: float = pydantic.Field(alias="amount")
    chain: typing_extensions.Literal["POLYGON_MAINNET", "TRON"] = pydantic.Field(
        alias="chain"
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    destination_account_id: str = pydantic.Field(alias="destinationAccountId")
    destination_currency: typing_extensions.Literal["usd"] = pydantic.Field(
        alias="destinationCurrency"
    )
    destination_user_id: str = pydantic.Field(alias="destinationUserId")
    payment_rail: typing_extensions.Literal["ach", "sepa", "wire"] = pydantic.Field(
        alias="paymentRail"
    )
    purpose_of_payment: typing.Optional[
        typing_extensions.Literal[
            "payment_for_goods",
            "payment_for_business_services",
            "payment_for_salary_or_benefits",
            "capital_investment_or_item",
            "other",
        ]
    ] = pydantic.Field(alias="purposeOfPayment", default=None)
    request_id: str = pydantic.Field(alias="requestId")
    source_currency: typing_extensions.Literal["usdc", "usdt"] = pydantic.Field(
        alias="sourceCurrency"
    )
    source_user_id: str = pydantic.Field(alias="sourceUserId")
