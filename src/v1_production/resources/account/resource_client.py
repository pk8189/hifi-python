"""File Generated by Sideko (sideko.dev)"""

from v1_production.core import (
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    SyncBaseClient,
    QueryParams,
    default_request_options,
)
from v1_production.resources.account.all import AllClient, AsyncAllClient
from v1_production.resources.account.on_ramp_rail import (
    AsyncOnRampRailClient,
    OnRampRailClient,
)
from v1_production.resources.account.activate_on_ramp_rail import (
    AsyncActivateOnRampRailClient,
    ActivateOnRampRailClient,
)
from v1_production.resources.account.brl import BrlClient, AsyncBrlClient
from v1_production.resources.account.euro import AsyncEuroClient, EuroClient
from v1_production.resources.account.usd import AsyncUsdClient, UsdClient
import typing
from v1_production.types.account import models


class AccountClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.all = AllClient(base_client=self._base_client)
        self.on_ramp_rail = OnRampRailClient(base_client=self._base_client)
        self.activate_on_ramp_rail = ActivateOnRampRailClient(
            base_client=self._base_client
        )
        self.brl = BrlClient(base_client=self._base_client)
        self.euro = EuroClient(base_client=self._base_client)
        self.usd = UsdClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountResponse:
        """
        Returns a bank account that was added with HIFI's /account endpoints.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["accountId"] = encode_param(account_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/account",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetAccountResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAccountClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.all = AsyncAllClient(base_client=self._base_client)
        self.on_ramp_rail = AsyncOnRampRailClient(base_client=self._base_client)
        self.activate_on_ramp_rail = AsyncActivateOnRampRailClient(
            base_client=self._base_client
        )
        self.brl = AsyncBrlClient(base_client=self._base_client)
        self.euro = AsyncEuroClient(base_client=self._base_client)
        self.usd = AsyncUsdClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        account_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountResponse:
        """
        Returns a bank account that was added with HIFI's /account endpoints.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["accountId"] = encode_param(account_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/account",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetAccountResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
