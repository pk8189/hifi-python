"""File Generated by Sideko (sideko.dev)"""

from v1_production.core import (
    SyncBaseClient,
    default_request_options,
    AsyncBaseClient,
    RequestOptions,
    to_encodable,
    encode_param,
    QueryParams,
)
from v1_production.resources.user.all import AsyncAllClient, AllClient
from v1_production.resources.user.create import CreateClient, AsyncCreateClient
from v1_production.resources.user.create_business import (
    CreateBusinessClient,
    AsyncCreateBusinessClient,
)
import typing
from v1_production.types.user import params, models


class UserClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.all = AllClient(base_client=self._base_client)
        self.create = CreateClient(base_client=self._base_client)
        self.create_business = CreateBusinessClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def put(
        self,
        *,
        data: typing.Optional[params.PutUserBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutUserResponse:
        """
        Use this endpoint to update a User. Submit only the properties you wish to update. For example, if the actions array from the Create User response indicates the ID was blurry, you could use this endpoint to submit a new govIdFront.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["userId"] = encode_param(user_id, False)
        _json = to_encodable(item=data, dump_with=params._SerializerPutUserBody)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path="/user",
            auth_names=["sec0"],
            query_params=_query,
            json=_json,
            cast_to=models.PutUserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self, *, user_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetUserResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["userId"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/user",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetUserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncUserClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.all = AsyncAllClient(base_client=self._base_client)
        self.create = AsyncCreateClient(base_client=self._base_client)
        self.create_business = AsyncCreateBusinessClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def put(
        self,
        *,
        data: typing.Optional[params.PutUserBody] = None,
        user_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutUserResponse:
        """
        Use this endpoint to update a User. Submit only the properties you wish to update. For example, if the actions array from the Create User response indicates the ID was blurry, you could use this endpoint to submit a new govIdFront.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["userId"] = encode_param(user_id, False)
        _json = to_encodable(item=data, dump_with=params._SerializerPutUserBody)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path="/user",
            auth_names=["sec0"],
            query_params=_query,
            json=_json,
            cast_to=models.PutUserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self, *, user_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> models.GetUserResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["userId"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/user",
            auth_names=["sec0"],
            query_params=_query,
            cast_to=models.GetUserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
