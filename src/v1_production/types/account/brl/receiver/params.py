"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostAccountBrlReceiverBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    address_line_1: typing_extensions.Required[str]
    address_line_2: typing_extensions.NotRequired[str]
    city: typing_extensions.Required[str]
    country: typing_extensions.Required[str]
    date_of_birth: typing_extensions.Required[str]
    email_field: typing_extensions.Required[str]
    first_name: typing_extensions.Required[str]
    image_url: typing_extensions.Required[str]
    last_name: typing_extensions.Required[str]
    postal_code: typing_extensions.Required[str]
    state_province_region: typing_extensions.Required[str]
    tax_id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["individual", "business"]
    ]
    user_id: typing_extensions.Required[str]


class _SerializerPostAccountBrlReceiverBody(pydantic.BaseModel):
    """
    Serializer for PostAccountBrlReceiverBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    address_line_1: str = pydantic.Field(alias="address_line_1")
    address_line_2: typing.Optional[str] = pydantic.Field(
        alias="address_line_2", default=None
    )
    city: str = pydantic.Field(alias="city")
    country: str = pydantic.Field(alias="country")
    date_of_birth: str = pydantic.Field(alias="dateOfBirth")
    email_field: str = pydantic.Field(alias="email")
    first_name: str = pydantic.Field(alias="firstName")
    image_url: str = pydantic.Field(alias="image_url")
    last_name: str = pydantic.Field(alias="lastName")
    postal_code: str = pydantic.Field(alias="postal_code")
    state_province_region: str = pydantic.Field(alias="state_province_region")
    tax_id: str = pydantic.Field(alias="tax_id")
    type: typing_extensions.Literal["individual", "business"] = pydantic.Field(
        alias="type"
    )
    user_id: str = pydantic.Field(alias="userId")
