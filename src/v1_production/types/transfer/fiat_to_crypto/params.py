"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostTransferFiatToCryptoBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    amount: typing_extensions.Required[float]
    chain: typing_extensions.Required[typing_extensions.Literal["POLYGON_MAINNET"]]
    destination_currency: typing_extensions.Required[
        typing_extensions.Literal["usdc", "usdt"]
    ]
    destination_user_id: typing_extensions.Required[str]
    is_instant: typing_extensions.Required[bool]
    request_id: typing_extensions.Required[str]
    source_account_id: typing_extensions.Required[str]
    source_currency: typing_extensions.Required[typing_extensions.Literal["usd"]]
    source_user_id: typing_extensions.Required[str]


class _SerializerPostTransferFiatToCryptoBody(pydantic.BaseModel):
    """
    Serializer for PostTransferFiatToCryptoBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    amount: float = pydantic.Field(alias="amount")
    chain: typing_extensions.Literal["POLYGON_MAINNET"] = pydantic.Field(alias="chain")
    destination_currency: typing_extensions.Literal["usdc", "usdt"] = pydantic.Field(
        alias="destinationCurrency"
    )
    destination_user_id: str = pydantic.Field(alias="destinationUserId")
    is_instant: bool = pydantic.Field(alias="isInstant")
    request_id: str = pydantic.Field(alias="requestId")
    source_account_id: str = pydantic.Field(alias="sourceAccountId")
    source_currency: typing_extensions.Literal["usd"] = pydantic.Field(
        alias="sourceCurrency"
    )
    source_user_id: str = pydantic.Field(alias="sourceUserId")
